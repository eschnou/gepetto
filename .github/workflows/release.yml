name: Build and Deploy JAR

on:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (optional)'
        required: false
        default: ''

jobs:
  build-and-deploy:
    name: Build and Deploy JAR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event.inputs.version }}" != "" ]; then
            VERSION="${{ github.event.inputs.version }}"
          elif [ "${{ github.event.release.tag_name }}" != "" ]; then
            VERSION="${{ github.event.release.tag_name }}"
          else
            VERSION=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout)
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo $VERSION > .version

      - name: Configure Maven settings
        run: |
          mkdir -p ~/.m2
          echo "<settings><servers><server><id>github</id><username>${{ github.actor }}</username><password>${{ secrets.GITHUB_TOKEN }}</password></server></servers></settings>" > ~/.m2/settings.xml

      - name: Build JAR
        run: ./mvnw clean package -DskipTests

      - name: Prepare artifacts
        run: |
          # Create version-specific JAR name
          JAR_FILE="gepetto-${VERSION}.jar"
          cp target/gepetto-*.jar "$JAR_FILE"
          
          # Create checksum
          sha256sum "$JAR_FILE" > "$JAR_FILE.sha256"
          
          echo "JAR_FILE=${JAR_FILE}" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ vars.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Upload to S3
        run: |
          S3_BUCKET="${{ vars.S3_BUCKET }}"
          S3_KEY_PREFIX="${{ vars.S3_KEY_PREFIX || 'releases' }}"
          
          # Upload versioned JAR
          aws s3 cp "${JAR_FILE}" "s3://${S3_BUCKET}/${S3_KEY_PREFIX}/${JAR_FILE}"
          
          # Upload as latest
          aws s3 cp "${JAR_FILE}" "s3://${S3_BUCKET}/${S3_KEY_PREFIX}/gepetto-latest.jar"
          
          # Upload checksums
          aws s3 cp "${JAR_FILE}.sha256" "s3://${S3_BUCKET}/${S3_KEY_PREFIX}/${JAR_FILE}.sha256"
          aws s3 cp "${JAR_FILE}.sha256" "s3://${S3_BUCKET}/${S3_KEY_PREFIX}/gepetto-latest.jar.sha256"
          
          # Upload install script
          aws s3 cp "install.sh" "s3://${S3_BUCKET}/${S3_KEY_PREFIX}/install.sh"
          
          echo "Uploaded to S3:"
          echo "s3://${S3_BUCKET}/${S3_KEY_PREFIX}/${JAR_FILE}"
          echo "s3://${S3_BUCKET}/${S3_KEY_PREFIX}/gepetto-latest.jar"
          echo "s3://${S3_BUCKET}/${S3_KEY_PREFIX}/${JAR_FILE}.sha256"
          echo "s3://${S3_BUCKET}/${S3_KEY_PREFIX}/gepetto-latest.jar.sha256"
          echo "s3://${S3_BUCKET}/${S3_KEY_PREFIX}/install.sh"

      - name: Upload artifacts to GitHub Release
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ env.JAR_FILE }}
          asset_name: ${{ env.JAR_FILE }}
          asset_content_type: application/java-archive

      - name: Upload checksum to GitHub Release
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ env.JAR_FILE }}.sha256
          asset_name: ${{ env.JAR_FILE }}.sha256
          asset_content_type: text/plain

      - name: Upload install script to GitHub Release
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: install.sh
          asset_name: install.sh
          asset_content_type: text/plain